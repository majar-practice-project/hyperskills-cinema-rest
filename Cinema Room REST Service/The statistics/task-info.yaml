type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/cinema/SeatController.java
  visible: true
  text: |
    package cinema;

    import cinema.domain.CinemaRoom;
    import cinema.domain.Seat;
    import cinema.domain.SeatNumberOutOfBoundException;
    import cinema.domain.UnavailableSeatException;
    import cinema.dto.DtoMapper;
    import cinema.dto.ErrorRequestBody;
    import cinema.dto.SeatRequest;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    public class SeatController {
        private final CinemaRoom room = new CinemaRoom(9, 9);

        @GetMapping("/seats")
        public CinemaRoom getSeats() {
            return room;
        }

        @PostMapping("/purchase")
        public ResponseEntity<Object> purchaseSeat(@RequestBody SeatRequest seatRequest) {
            try{
                Seat requestSeat = DtoMapper.SeatRequestToSeat(seatRequest);
                return new ResponseEntity<>(room.purchaseSeat(requestSeat), HttpStatus.OK);
            } catch (UnavailableSeatException | SeatNumberOutOfBoundException e){
                return new ResponseEntity<>(new ErrorRequestBody(e.getMessage()), HttpStatus.BAD_REQUEST);
            }

        }
    }
  learner_created: false
- name: src/cinema/domain/Seat.java
  visible: true
  text: |
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Seat {
        private int row;
        private int column;

        private int price;

        public Seat() {
        }

        @JsonCreator
        public Seat(@JsonProperty int row,
                    @JsonProperty int column,
                    @JsonProperty int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        @Override
        public int hashCode() {
            return 10000 * row + column;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (!(obj instanceof Seat)) return false;

            Seat anotherSeat = (Seat) obj;
            return (row == anotherSeat.row) && (column == anotherSeat.column);
        }
    }
  learner_created: false
- name: src/cinema/domain/CinemaRoom.java
  visible: true
  text: |
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonGetter;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Map;
    import java.util.Set;
    import java.util.concurrent.ConcurrentHashMap;
    import java.util.function.BiFunction;

    public class CinemaRoom {
        @JsonIgnore
        private final Map<Seat, Seat> availableSeats = new ConcurrentHashMap<>();
        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;

        public CinemaRoom() {
        }

        public CinemaRoom(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;

            for (int r = 1; r <= totalRows; r++) {
                for (int c = 1; c <= totalColumns; c++) {
                    addSeat(r, c, (row, column) -> row <= 4 ? 10 : 8);
                }
            }
        }

        @JsonCreator
        public CinemaRoom(
                @JsonProperty("total_rows") int totalRows,
                @JsonProperty("total_columns") int totalColumns,
                @JsonProperty("available_seats") Set<Seat> availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            availableSeats.forEach(seat -> this.availableSeats.put(seat, seat));
        }

        private void addSeat(int r, int c, BiFunction<Integer, Integer, Integer> priceConfiguration) {
            Seat newSeat = new Seat(r, c, priceConfiguration.apply(r, c));
            availableSeats.put(newSeat, newSeat);
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        @JsonGetter("available_seats")
        public Set<Seat> getAvailableSeatsAsSet() {
            return availableSeats.keySet();
        }

        public Map<Seat, Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void validateSeat(Seat seat) throws SeatNumberOutOfBoundException {
            int row = seat.getRow();
            int column = seat.getColumn();

            if (row < 1 || row > totalRows || column < 1 || column > totalColumns) {
                throw new SeatNumberOutOfBoundException();
            }
        }

        public Seat purchaseSeat(Seat seat) throws UnavailableSeatException, SeatNumberOutOfBoundException {
            validateSeat(seat);
            Seat purchasedSeat = availableSeats.remove(seat);
            if (purchasedSeat == null) {
                throw new UnavailableSeatException();
            } else {
                return purchasedSeat;
            }
        }

    }
  learner_created: false
- name: src/cinema/dto/SeatRequest.java
  visible: true
  text: |-
    package cinema.dto;

    public class SeatRequest {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }
    }
  learner_created: false
- name: src/cinema/dto/DtoMapper.java
  visible: true
  text: |
    package cinema.dto;

    import cinema.domain.Seat;

    public class DtoMapper {
        public static Seat SeatRequestToSeat(SeatRequest seatDto) {
            int r = seatDto.getRow();
            int c = seatDto.getColumn();
            return new Seat(r, c, 0);
        }
    }
  learner_created: false
- name: src/cinema/domain/SeatNumberOutOfBoundException.java
  visible: true
  text: |-
    package cinema.domain;

    public class SeatNumberOutOfBoundException extends Exception{
        public SeatNumberOutOfBoundException() {
            super("The number of a row or a column is out of bounds!");
        }

        public SeatNumberOutOfBoundException(String message) {
            super(message);
        }
    }
  learner_created: false
- name: src/cinema/domain/UnavailableSeatException.java
  visible: true
  text: |
    package cinema.domain;

    public class UnavailableSeatException extends Exception{
        public UnavailableSeatException() {
            super("The ticket has been already purchased!");
        }

        public UnavailableSeatException(String message) {
            super(message);
        }
    }
  learner_created: false
- name: src/cinema/dto/ErrorRequestBody.java
  visible: true
  text: |
    package cinema.dto;

    public class ErrorRequestBody {
        private String error;

        public ErrorRequestBody(){}

        public ErrorRequestBody(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/dto/CinemaStatistics.java
  visible: true
  learner_created: true
- name: src/cinema/authentication/PasswordVerifier.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
record: 3
